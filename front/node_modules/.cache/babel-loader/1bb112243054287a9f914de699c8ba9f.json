{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(authSubscriber),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getUserFromApi);\n\nimport { put, takeEvery, call, all } from 'redux-saga/effects';\n/** Import actions */\n\nimport { loginFailed, loginSucceed, getUserFromApi as getUserFromApiAction, getUserFromApiFailed, getUserFromApiSucceed } from './authActions';\n/** Import api */\n\nimport * as authApi from './authApi';\nexport function authSubscriber() {\n  return _regeneratorRuntime.wrap(function authSubscriber$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeEvery('LOGIN', login)]);\n\n        case 2:\n          _context.next = 4;\n          return all([takeEvery('GET_USER_FROM_API', getUserFromApi)]);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function login(_ref) {\n  var _ref$payload, username, password, token;\n\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref$payload = _ref.payload, username = _ref$payload.username, password = _ref$payload.password;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(authApi.login, username, password);\n\n        case 4:\n          token = _context2.sent;\n          _context2.next = 7;\n          return put(loginSucceed(token));\n\n        case 7:\n          _context2.next = 9;\n          return put(getUserFromApiAction());\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put(loginFailed(_context2.t0));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\nexport function getUserFromApi() {\n  var user;\n  return _regeneratorRuntime.wrap(function getUserFromApi$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(authApi.getUser);\n\n        case 3:\n          user = _context3.sent;\n          _context3.next = 6;\n          return put(getUserFromApiSucceed(user));\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put(getUserFromApiFailed(_context3.t0));\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}","map":{"version":3,"sources":["E:\\3-Limyong\\front\\src\\services\\auth\\authSaga.js"],"names":["authSubscriber","login","getUserFromApi","put","takeEvery","call","all","loginFailed","loginSucceed","getUserFromApiAction","getUserFromApiFailed","getUserFromApiSucceed","authApi","payload","username","password","token","getUser","user"],"mappings":";;;;yBAciBA,c;;;yBAKAC,K;;;yBAUAC,c;;AA7BjB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,EAA+BC,GAA/B,QAA0C,oBAA1C;AAEA;;AACA,SACEC,WADF,EAEEC,YAFF,EAGEN,cAAc,IAAIO,oBAHpB,EAIEC,oBAJF,EAKEC,qBALF,QAMO,eANP;AAQA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAEA,OAAO,SAAUZ,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMM,GAAG,CAAC,CAACF,SAAS,CAAC,OAAD,EAAUH,KAAV,CAAV,CAAD,CAAT;;AADK;AAAA;AAEL,iBAAMK,GAAG,CAAC,CAACF,SAAS,CAAC,mBAAD,EAAsBF,cAAtB,CAAV,CAAD,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUD,KAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkBY,OAAlB,EAA6BC,QAA7B,gBAA6BA,QAA7B,EAAuCC,QAAvC,gBAAuCA,QAAvC;AAAA;AAAA;AAEW,iBAAMV,IAAI,CAACO,OAAO,CAACX,KAAT,EAAgBa,QAAhB,EAA0BC,QAA1B,CAAV;;AAFX;AAEGC,UAAAA,KAFH;AAAA;AAGH,iBAAMb,GAAG,CAACK,YAAY,CAACQ,KAAD,CAAb,CAAT;;AAHG;AAAA;AAIH,iBAAMb,GAAG,CAACM,oBAAoB,EAArB,CAAT;;AAJG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMH,iBAAMN,GAAG,CAACI,WAAW,cAAZ,CAAT;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAUL,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU,iBAAMG,IAAI,CAACO,OAAO,CAACK,OAAT,CAAV;;AAFV;AAEGC,UAAAA,IAFH;AAAA;AAGH,iBAAMf,GAAG,CAACQ,qBAAqB,CAACO,IAAD,CAAtB,CAAT;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH,iBAAMf,GAAG,CAACO,oBAAoB,cAArB,CAAT;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, takeEvery, call, all } from 'redux-saga/effects';\n\n/** Import actions */\nimport {\n  loginFailed,\n  loginSucceed,\n  getUserFromApi as getUserFromApiAction,\n  getUserFromApiFailed,\n  getUserFromApiSucceed\n} from './authActions';\n\n/** Import api */\nimport * as authApi from './authApi';\n\nexport function* authSubscriber() {\n  yield all([takeEvery('LOGIN', login)]);\n  yield all([takeEvery('GET_USER_FROM_API', getUserFromApi)]);\n}\n\nexport function* login({ payload: { username, password } }) {\n  try {\n    const token = yield call(authApi.login, username, password);\n    yield put(loginSucceed(token));\n    yield put(getUserFromApiAction());\n  } catch (error) {\n    yield put(loginFailed(error));\n  }\n}\n\nexport function* getUserFromApi() {\n  try {\n    const user = yield call(authApi.getUser);\n    yield put(getUserFromApiSucceed(user));\n  } catch (error) {\n    yield put(getUserFromApiFailed(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}