{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(citySubscriber),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCities),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addCity),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addCities),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteCity),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateCity),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCity);\n\nimport { put, takeEvery, call, all } from 'redux-saga/effects'; // Import Actions\n\nimport { getCitiesSucceed, getCitiesFailed, addCitySucceed, addCityFailed, addCitiesSucceed, addCitiesFailed, deleteCitySucceed, deleteCityFailed, getCities as getCitiesAction, updateCitySucceed, updateCityFailed, getCityFailed, getCitySucceed } from './cityActions'; // Import API\n\nimport * as cityApi from './cityApi';\nexport function citySubscriber() {\n  return _regeneratorRuntime.wrap(function citySubscriber$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeEvery('GET_CITIES', getCities)]);\n\n        case 2:\n          _context.next = 4;\n          return all([takeEvery('ADD_CITY', addCity)]);\n\n        case 4:\n          _context.next = 6;\n          return all([takeEvery('DELETE_CITY', deleteCity)]);\n\n        case 6:\n          _context.next = 8;\n          return all([takeEvery('UPDATE_CITY', updateCity)]);\n\n        case 8:\n          _context.next = 10;\n          return all([takeEvery('GET_CITY', getCity)]);\n\n        case 10:\n          _context.next = 12;\n          return all([takeEvery('ADD_CITIES', addCities)]);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getCities(_ref) {\n  var params, cities;\n  return _regeneratorRuntime.wrap(function getCities$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          params = _ref.payload.params;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(cityApi.getCities, params);\n\n        case 4:\n          cities = _context2.sent;\n          _context2.next = 7;\n          return put(getCitiesSucceed(cities));\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.error(_context2.t0);\n          _context2.next = 14;\n          return put(getCitiesFailed(_context2.t0));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\nexport function addCity(_ref2) {\n  var _ref2$payload, city, params;\n\n  return _regeneratorRuntime.wrap(function addCity$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, city = _ref2$payload.city, params = _ref2$payload.params;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(cityApi.addCity, city);\n\n        case 4:\n          _context3.next = 6;\n          return put(addCitySucceed());\n\n        case 6:\n          _context3.next = 8;\n          return put(getCitiesAction(params));\n\n        case 8:\n          _context3.next = 15;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.error(_context3.t0);\n          _context3.next = 15;\n          return put(addCityFailed(_context3.t0));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\nexport function addCities(_ref3) {\n  var _ref3$payload, data, params;\n\n  return _regeneratorRuntime.wrap(function addCities$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, data = _ref3$payload.data, params = _ref3$payload.params;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(cityApi.addCities, data);\n\n        case 4:\n          _context4.next = 6;\n          return put(addCitiesSucceed());\n\n        case 6:\n          _context4.next = 8;\n          return put(getCitiesAction(params));\n\n        case 8:\n          _context4.next = 15;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.error(_context4.t0);\n          _context4.next = 15;\n          return put(addCitiesFailed(_context4.t0));\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 10]]);\n}\nexport function deleteCity(_ref4) {\n  var id;\n  return _regeneratorRuntime.wrap(function deleteCity$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          id = _ref4.payload.id;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(cityApi.deleteCity, id);\n\n        case 4:\n          _context5.next = 6;\n          return put(deleteCitySucceed());\n\n        case 6:\n          _context5.next = 8;\n          return put(getCitiesAction());\n\n        case 8:\n          _context5.next = 15;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.error(_context5.t0);\n          _context5.next = 15;\n          return put(deleteCityFailed(_context5.t0));\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 10]]);\n}\nexport function updateCity(_ref5) {\n  var _ref5$payload, id, city, params;\n\n  return _regeneratorRuntime.wrap(function updateCity$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _ref5$payload = _ref5.payload, id = _ref5$payload.id, city = _ref5$payload.city, params = _ref5$payload.params;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return call(cityApi.updateCity, id, city);\n\n        case 4:\n          _context6.next = 6;\n          return put(updateCitySucceed());\n\n        case 6:\n          _context6.next = 8;\n          return put(getCitiesAction(params));\n\n        case 8:\n          _context6.next = 15;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.error(_context6.t0);\n          _context6.next = 15;\n          return put(updateCityFailed(_context6.t0));\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[1, 10]]);\n}\nexport function getCity(_ref6) {\n  var id, response, city;\n  return _regeneratorRuntime.wrap(function getCity$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          id = _ref6.payload.id;\n          _context7.prev = 1;\n          _context7.next = 4;\n          return call(cityApi.getCityWithId, id);\n\n        case 4:\n          response = _context7.sent;\n          city = response.data;\n          _context7.next = 8;\n          return put(getCitySucceed(city));\n\n        case 8:\n          _context7.next = 15;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t0 = _context7[\"catch\"](1);\n          console.error(_context7.t0);\n          _context7.next = 15;\n          return put(getCityFailed(_context7.t0));\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[1, 10]]);\n}","map":{"version":3,"sources":["E:\\3-Limyong\\front\\src\\services\\city\\citySaga.js"],"names":["citySubscriber","getCities","addCity","addCities","deleteCity","updateCity","getCity","put","takeEvery","call","all","getCitiesSucceed","getCitiesFailed","addCitySucceed","addCityFailed","addCitiesSucceed","addCitiesFailed","deleteCitySucceed","deleteCityFailed","getCitiesAction","updateCitySucceed","updateCityFailed","getCityFailed","getCitySucceed","cityApi","params","payload","cities","console","error","city","data","id","getCityWithId","response"],"mappings":"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","sourcesContent":["import { put, takeEvery, call, all } from 'redux-saga/effects';\n\n// Import Actions\nimport {\n  getCitiesSucceed,\n  getCitiesFailed,\n  addCitySucceed,\n  addCityFailed,\n  addCitiesSucceed,\n  addCitiesFailed,\n  deleteCitySucceed,\n  deleteCityFailed,\n  getCities as getCitiesAction,\n  updateCitySucceed,\n  updateCityFailed,\n  getCityFailed,\n  getCitySucceed\n} from './cityActions';\n\n// Import API\nimport * as cityApi from './cityApi';\n\nexport function* citySubscriber() {\n  yield all([takeEvery('GET_CITIES', getCities)]);\n  yield all([takeEvery('ADD_CITY', addCity)]);\n  yield all([takeEvery('DELETE_CITY', deleteCity)]);\n  yield all([takeEvery('UPDATE_CITY', updateCity)]);\n  yield all([takeEvery('GET_CITY', getCity)]);\n  yield all([takeEvery('ADD_CITIES', addCities)]);\n}\n\nexport function* getCities({ payload: { params } }) {\n  try {\n    const cities = yield call(cityApi.getCities, params);\n    yield put(getCitiesSucceed(cities));\n  } catch (error) {\n    console.error(error);\n    yield put(getCitiesFailed(error));\n  }\n}\n\nexport function* addCity({ payload: { city, params } }) {\n  try {\n    yield call(cityApi.addCity, city);\n    yield put(addCitySucceed());\n    yield put(getCitiesAction(params));\n  } catch (error) {\n    console.error(error);\n    yield put(addCityFailed(error));\n  }\n}\n\nexport function* addCities({ payload: { data, params } }) {\n  try {\n    yield call(cityApi.addCities, data);\n    yield put(addCitiesSucceed());\n    yield put(getCitiesAction(params));\n  } catch (error) {\n    console.error(error);\n    yield put(addCitiesFailed(error));\n  }\n}\n\nexport function* deleteCity({ payload: { id } }) {\n  try {\n    yield call(cityApi.deleteCity, id);\n    yield put(deleteCitySucceed());\n    yield put(getCitiesAction());\n  } catch (error) {\n    console.error(error);\n    yield put(deleteCityFailed(error));\n  }\n}\n\nexport function* updateCity({ payload: { id, city, params } }) {\n  try {\n    yield call(cityApi.updateCity, id, city);\n    yield put(updateCitySucceed());\n    yield put(getCitiesAction(params));\n  } catch (error) {\n    console.error(error);\n    yield put(updateCityFailed(error));\n  }\n}\n\nexport function* getCity({ payload: { id } }) {\n  try {\n    const response = yield call(cityApi.getCityWithId, id);\n    const city = response.data;\n    yield put(getCitySucceed(city));\n  } catch (error) {\n    console.error(error);\n    yield put(getCityFailed(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}