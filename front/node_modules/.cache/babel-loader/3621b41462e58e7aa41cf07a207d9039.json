{"ast":null,"code":"import _classCallCheck from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\3-Limyong\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\3-Limyong\\\\front\\\\src\\\\components\\\\ImageUploader\\\\ImageUploader.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport { toastr } from 'react-redux-toastr';\nvar imageMaxSize = 1000000000; // bytes\n\nvar acceptedFileTypes = 'image/x-png, image/png, image/jpeg, image/jpg, image/gif';\nvar acceptedFileTypesArray = acceptedFileTypes.split(',').map(function (item) {\n  return item.trim();\n});\n\nvar ImageUploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ImageUploader, _React$Component);\n\n  function ImageUploader(props) {\n    var _this;\n\n    _classCallCheck(this, ImageUploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageUploader).call(this, props));\n    _this.state = {\n      image: null\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnDrop = _this.handleOnDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClearToDefault = _this.handleClearToDefault.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n   * Called when <input> changed\n   * @param event\n   */\n\n\n  _createClass(ImageUploader, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0])\n      });\n    }\n    /**\n     * Very files before upload\n     *\n     * @param files\n     */\n\n  }, {\n    key: \"verifyFile\",\n    value: function verifyFile(files) {\n      if (files && files.length > 0) {\n        var currentFile = files[0];\n        var currentFileType = currentFile.type;\n        var currentFileSize = currentFile.size;\n\n        if (currentFileSize > imageMaxSize) {\n          toastr.error('Error', \"This file is not allowed. \".concat(currentFileSize, \" bytes is too large\"));\n          return false;\n        }\n\n        if (!acceptedFileTypesArray.includes(currentFileType)) {\n          toastr.error('Error', 'This file is not allowed. Only images are allowed');\n          return false;\n        }\n\n        return true;\n      }\n    }\n    /**\n     * handle OnDrop of Dropzone component\n     * @param files\n     * @param rejectedFiles\n     */\n\n  }, {\n    key: \"handleOnDrop\",\n    value: function handleOnDrop(files, rejectedFiles) {\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        this.verifyFile(rejectedFiles);\n      }\n\n      if (files && files.length > 0) {\n        var isVerified = this.verifyFile(files);\n\n        if (isVerified) {\n          // imageBase64Data\n          var url = URL.createObjectURL(files[0]);\n          this.setState({\n            image: url\n          }); // Call handleOnLoad props function (ex: to fire reducer functions in parent components that use this component)\n\n          if (this.props.handleOnLoad) {\n            this.props.handleOnLoad(files[0], files[0].type, files[0].name);\n          }\n        }\n      }\n    }\n    /**\n     * Reset to default\n     * @param event\n     */\n\n  }, {\n    key: \"handleClearToDefault\",\n    value: function handleClearToDefault(event) {\n      if (event) event.preventDefault();\n      this.setState({\n        image: null\n      }); // Call handleClearToDefault prop function if function provided\n\n      if (this.props.handleClearToDefault) {\n        this.props.handleClearToDefault();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = this.props.style; // if (this.state.image && this.state.image !== '') {\n      //   style = {\n      //     backgroundImage: `url(${this.state.image})`,\n      //     backgroundSize: 'contain',\n      //     backgroundRepeat: 'no-repeat',\n      //     backgroundPosition: '50% 50%',\n      //     ...style,\n      //   };\n      // }\n\n      var image = this.state.image;\n\n      if (image === null && this.props.image) {\n        image = this.props.image;\n      }\n\n      return React.createElement(Dropzone, {\n        onDrop: this.handleOnDrop,\n        accept: acceptedFileTypes,\n        className: this.props.className,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, image ? React.createElement(\"img\", {\n        src: image,\n        alt: \"\",\n        className: \"w-100 h-100\",\n        style: {\n          objectFit: 'cover',\n          borderTopLeftRadius: 18,\n          borderTopRightRadius: 18\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }) : this.props.renderContent ? this.props.renderContent : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ImageUploader;\n}(React.Component);\n\nImageUploader.propTypes = {\n  handleOnLoad: PropTypes.func,\n  handleClearToDefault: PropTypes.func,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  image: PropTypes.string,\n  renderContent: PropTypes.any\n};\nexport default ImageUploader;","map":{"version":3,"sources":["E:\\3-Limyong\\front\\src\\components\\ImageUploader\\ImageUploader.js"],"names":["React","PropTypes","Dropzone","toastr","imageMaxSize","acceptedFileTypes","acceptedFileTypesArray","split","map","item","trim","ImageUploader","props","state","image","handleChange","bind","handleOnDrop","handleClearToDefault","event","setState","file","URL","createObjectURL","target","files","length","currentFile","currentFileType","type","currentFileSize","size","error","includes","rejectedFiles","verifyFile","isVerified","url","handleOnLoad","name","preventDefault","style","className","objectFit","borderTopLeftRadius","borderTopRightRadius","renderContent","Component","propTypes","func","string","object","any"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport { toastr } from 'react-redux-toastr';\n\nconst imageMaxSize = 1000000000; // bytes\nconst acceptedFileTypes =\n  'image/x-png, image/png, image/jpeg, image/jpg, image/gif';\nconst acceptedFileTypesArray = acceptedFileTypes.split(',').map(item => {\n  return item.trim();\n});\n\nclass ImageUploader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      image: null\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleOnDrop = this.handleOnDrop.bind(this);\n    this.handleClearToDefault = this.handleClearToDefault.bind(this);\n  }\n\n  /**\n   * Called when <input> changed\n   * @param event\n   */\n  handleChange(event) {\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0])\n    });\n  }\n\n  /**\n   * Very files before upload\n   *\n   * @param files\n   */\n  verifyFile(files) {\n    if (files && files.length > 0) {\n      const currentFile = files[0];\n      const currentFileType = currentFile.type;\n      const currentFileSize = currentFile.size;\n\n      if (currentFileSize > imageMaxSize) {\n        toastr.error(\n          'Error',\n          `This file is not allowed. ${currentFileSize} bytes is too large`\n        );\n        return false;\n      }\n      if (!acceptedFileTypesArray.includes(currentFileType)) {\n        toastr.error(\n          'Error',\n          'This file is not allowed. Only images are allowed'\n        );\n        return false;\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * handle OnDrop of Dropzone component\n   * @param files\n   * @param rejectedFiles\n   */\n  handleOnDrop(files, rejectedFiles) {\n    if (rejectedFiles && rejectedFiles.length > 0) {\n      this.verifyFile(rejectedFiles);\n    }\n\n    if (files && files.length > 0) {\n      const isVerified = this.verifyFile(files);\n      if (isVerified) {\n        // imageBase64Data\n        const url = URL.createObjectURL(files[0]);\n        this.setState({\n          image: url\n        });\n\n        // Call handleOnLoad props function (ex: to fire reducer functions in parent components that use this component)\n        if (this.props.handleOnLoad) {\n          this.props.handleOnLoad(files[0], files[0].type, files[0].name);\n        }\n      }\n    }\n  }\n\n  /**\n   * Reset to default\n   * @param event\n   */\n  handleClearToDefault(event) {\n    if (event) event.preventDefault();\n    this.setState({\n      image: null\n    });\n\n    // Call handleClearToDefault prop function if function provided\n    if (this.props.handleClearToDefault) {\n      this.props.handleClearToDefault();\n    }\n  }\n\n  render() {\n    let style = this.props.style;\n    // if (this.state.image && this.state.image !== '') {\n    //   style = {\n    //     backgroundImage: `url(${this.state.image})`,\n    //     backgroundSize: 'contain',\n    //     backgroundRepeat: 'no-repeat',\n    //     backgroundPosition: '50% 50%',\n    //     ...style,\n    //   };\n    // }\n\n    let image = this.state.image;\n    if (image === null && this.props.image) {\n      image = this.props.image;\n    }\n\n    return (\n      <Dropzone\n        onDrop={this.handleOnDrop}\n        accept={acceptedFileTypes}\n        className={this.props.className}\n        style={style}\n      >\n        {image ? (\n          <img\n            src={image}\n            alt=\"\"\n            className=\"w-100 h-100\"\n            style={{\n              objectFit: 'cover',\n              borderTopLeftRadius: 18,\n              borderTopRightRadius: 18\n            }}\n          />\n        ) : this.props.renderContent ? (\n          this.props.renderContent\n        ) : (\n          <div />\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nImageUploader.propTypes = {\n  handleOnLoad: PropTypes.func,\n  handleClearToDefault: PropTypes.func,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  image: PropTypes.string,\n  renderContent: PropTypes.any\n};\n\nexport default ImageUploader;\n"]},"metadata":{},"sourceType":"module"}